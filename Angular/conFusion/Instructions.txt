     bower install

for grunt, follow instructions from exercise

     npm install -g gulp
	 cd conFusion
     npm install gulp --save-dev
	 npm install jshint gulp-jshint jshint-stylish gulp-imagemin gulp-concat gulp-uglify gulp-minify-css gulp-usemin gulp-cache gulp-changed gulp-rev gulp-rename gulp-notify  browser-sync del --save-dev
	 
	 **create a file named gulpfile.js in the conFusion folder.
gulpfile.js:
	var gulp = require('gulp'),
    minifycss = require('gulp-minify-css'),
    jshint = require('gulp-jshint'),
    stylish = require('jshint-stylish'),
    uglify = require('gulp-uglify'),
    usemin = require('gulp-usemin'),
    imagemin = require('gulp-imagemin'),
    rename = require('gulp-rename'),
    concat = require('gulp-concat'),
    notify = require('gulp-notify'),
    cache = require('gulp-cache'),
    changed = require('gulp-changed'),
    rev = require('gulp-rev'),
    browserSync = require('browser-sync'),
    del = require('del');

gulp.task('jshint', function() {
  return gulp.src('app/scripts/**/*.js')
  .pipe(jshint())
  .pipe(jshint.reporter(stylish));
});

// Clean
gulp.task('clean', function() {
    return del(['dist']);
});

// Default task
gulp.task('default', ['clean'], function() {
    gulp.start('usemin', 'imagemin','copyfonts');
});

gulp.task('usemin',['jshint'], function () {
  return gulp.src('./app/menu.html')
      .pipe(usemin({
        css:[minifycss(),rev()],
        js: [uglify(),rev()]
      }))
      .pipe(gulp.dest('dist/'));
});

// Images
gulp.task('imagemin', function() {
  return del(['dist/images']), gulp.src('app/images/**/*')
    .pipe(cache(imagemin({ optimizationLevel: 3, progressive: true, interlaced: true })))
    .pipe(gulp.dest('dist/images'))
    .pipe(notify({ message: 'Images task complete' }));
});

gulp.task('copyfonts', ['clean'], function() {
   gulp.src('./bower_components/font-awesome/fonts/**/*.{ttf,woff,eof,svg}*')
   .pipe(gulp.dest('./dist/fonts'));
   gulp.src('./bower_components/bootstrap/dist/fonts/**/*.{ttf,woff,eof,svg}*')
   .pipe(gulp.dest('./dist/fonts'));
});

// Watch
gulp.task('watch', ['browser-sync'], function() {
  // Watch .js files
  gulp.watch('{app/scripts/**/*.js,app/styles/**/*.css,app/**/*.html}', ['usemin']);
      // Watch image files
  gulp.watch('app/images/**/*', ['imagemin']);

});

gulp.task('browser-sync', ['default'], function () {
   var files = [
      'app/**/*.html',
      'app/styles/**/*.css',
      'app/images/**/*.png',
      'app/scripts/**/*.js',
      'dist/**/*'
   ];

   browserSync.init(files, {
      server: {
         baseDir: "dist",
         index: "menu.html"
      }
   });
        // Watch any files in dist/, reload on change
  gulp.watch(['dist/**']).on('change', browserSync.reload);
    });

	**EOF****

	gulp watch

	// Install gulp-ng-annotate plugin:
	npm install gulp-ng-annotate --save-dev

	// Add to gulpfile.js: var ngannotate = require('gulp-ng-annotate');
	// change usemin to this:
gulp.task('usemin',['jshint'], function () {
  return gulp.src('./app/menu.html')
    .pipe(usemin({
      css:[minifycss(),rev()],
      js: [ngannotate(),uglify(),rev()]
    }))
    
    .pipe(gulp.dest('dist/'));
});

**EOF****

	// single page applications:
     bower install angular-route -S

	 // UI Router (a better way)
     bower install angular-ui-router -S

	 // json-server
     npm install json-server -g

	 // run
     json-server --watch db.json

	 // test it out:
http://localhost:3000/dishes
http://localhost:3000/promotions
http://localhost:3000/leadership
http://localhost:3000/feedback

//The json-server also provides a static web server. 
//Any resources that you put in a folder named 
//public in the json-server folder above, 
//will be served by the server at the following address:
  http://localhost:3000/

  // update usemin gulpfile.js:
gulp.task('usemin',['jshint'], function () {
  return gulp.src('./app/**/*.html')
      .pipe(usemin({
        css:[minifycss(),rev()],
        js: [ngannotate(),uglify(),rev()]
      }))
      .pipe(gulp.dest('dist/'));
});

// and browser-sync
   browserSync.init(files, {
      server: {
         baseDir: "dist",
         index: "index.html"
      }
   });

   // now run gulp and copy dist contents to the public folder

   //REST include the min files into index.html
	bower install angular-resource -S

	TESTING
	----------
	- Karma config file
	- unit tests carried out by Jasmine (in chrome)
	 npm install jasmine-core --save-dev
     npm install karma-cli -g
     npm install karma-jasmine --save-dev
     npm install phantomjs karma-phantomjs-launcher karma-chrome-launcher --save-dev
     bower install angular-mocks -S

	 // create a directory named test
	 // create test/karma.conf.js 
	 // create menucontroller.js under test/unit/controllers/
	 // follow instructions here and create stateMock.js: http://stackoverflow.com/questions/23655307/ui-router-interfers-with-httpbackend-unit-test-angular-js/23670198#23670198
	 // Add the following to menucontroller.js:
describe('Controller: MenuController', function() {

    // load the controller's module
    beforeEach(module('confusionApp'));
    beforeEach(module('stateMock'));
    
    var MenuController, scope, $httpBackend, state;

    // Initialize the controller and a mock scope
    beforeEach(inject(function($state, $controller, _$httpBackend_, $rootScope, menuFactory) {
state = $state;
//same old thing

	// and to karma.conf.js (under files):
	'test/mock/**/*.js'
	 // run the tests

     karma start karma.conf.js

	 E2E
	 -----
	 // End-to-End testing
	npm install protractor -g
	webdriver-manager update

	// run json-server
	gulp watch

	// create test/protractor.conf.js and folder test/e2e
	// create test/e2e/scenarios.js
	// execute e2e test from the test/ folder:      
	protractor protractor.conf.js

	SCAFFOLDING TOOLSET
	-------------------
	- Bower: package Manager for the web
	- (Grunt and) Gulp: Task Automation
	- Yo: Web app Scaffolding
	- Yeoman: Workflow designed around Yo, Bower and Gulp

	// installing Yo, bower, (Grunt,) and gulp
	npm install yo -g
	// installing Generators (go to yeoman.io/generators/)
	npm install generator-angular -g

	// cd to your project folder
	yo angular
	- use Gulp instead of Grunt? Y
	- use Sass? N
	- Include Bootstrap? Y
	- Include:
	 angular-anmiate.js
	 angular-aria.js
	 angular-cookies.js
	*angular-resource.js
	 angular-messages.js
	*angular-route.js
	 angular-sanitize.js
	 angular-touch.js

	 npm install <missing packages, i.e.: karma jasmine-core phantomjs>
